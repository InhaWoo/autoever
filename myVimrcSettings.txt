set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin '~/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}
" Lightline
Plugin 'itchyny/lightline.vim'
" NerdTree
Plugin 'scrooloose/nerdtree'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" Lightline
set noshowmode
set laststatus=2
autocmd VimEnter * call lightline#update()
let g:lightline = {
      \ 'colorscheme': 'deus',
      \ }

" NERDTree
nnoremap <C-n> :NERDTreeToggle<CR>
"Start NERDTree and put the cursor back in the other window.
"autocmd VimEnter * NERDTree | wincmd p
"Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endifKey Remaps

" line number
set nu
set relativenumber

" search
set hls
set ignorecase
set incsearch

" Indent
set smartindent
set expandtab
set tabstop=4
set shiftwidth=4

" Automatically read files when they are changed externally
set autoread

" Show matching (, {, [, etc.
set showmatch

" Cursor Shape
let &t_SI .= "\e[6 q"
let &t_EI .= "\e[2 q"

" Scrolloff
set scrolloff=2

" Highlight current line
set cursorline

"커서를 파일의 마지막으로 수정된 위치로 이동
au BufReadPost *
\ if line("'\"") > 0 && line("'\"") <= line("$") |
\ exe "norm g`\"" |
\ endif

""" Key Remap
" Map 'Alt ;', 'Ctrl j' to exit insert mode and move to the position of the last change
inoremap <expr> <M-;> "<Esc>l"
inoremap <expr> <C-j> "<Esc>l"
" some plain inha inha inha hi inha inha text
inoremap <expr> <Esc> "<Esc>l"
" Map 'Ctrl o' to make blank line under current line
nnoremap <expr> <C-o> "o<Esc>k"
" Map '<', '>' to '<<', '>>'
nnoremap <expr> < "<<"
nnoremap <expr> > ">>"
" Map 'gp', 'gP' to '"0p', '"0P'
nnoremap <expr> gp "\"0p"
nnoremap <expr> gP "\"0P"
